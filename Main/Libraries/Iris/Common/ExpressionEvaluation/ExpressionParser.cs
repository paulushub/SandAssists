// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2006
// (see accompanying GPPGcopyright.rtf)


using System;
using System.Collections.Generic;
using System.Text;
using gppg;
using Common.Helpers;

namespace Common.ExpressionEvaluation
{
internal enum Tokens {error=125,EOF=126,VARIABLE=127,LET=128,
	UNLET=129,FUNCTIONCALL=130,CONSTANT=131,ASSIGN=132,OR=133,AND=134,EQUALS=135,NOTEQUALS=136,
	LESSTHAN=137,GREATERTHAN=138,LESSOREQUAL=139,GREATEROREQUAL=140,UMINUS=141};

internal class ExpressionParser: ShiftReduceParser<Expression, LexLocation>
{

#pragma warning disable 162
	internal Expression Result;
	internal Evaluator Evaluator;
  protected override void Initialize()
  {
	this.errToken = (int)Tokens.error;
	this.eofToken = (int)Tokens.EOF;

	states=new State[56];
	AddState(0,new State(new int[]{40,34,45,37,33,39,131,41,127,51,130,43,125,49,129,54},new int[]{-1,1,-3,3,-4,5}));
	AddState(1,new State(new int[]{126,2}));
	AddState(2,new State(-1));
	AddState(3,new State(new int[]{126,4}));
	AddState(4,new State(-2));
	AddState(5,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,18,134,20,135,22,136,24,137,26,138,28,139,30,140,32,126,-3}));
	AddState(6,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,7}));
	AddState(7,new State(-10));
	AddState(8,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,9}));
	AddState(9,new State(-11));
	AddState(10,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,11}));
	AddState(11,new State(-12));
	AddState(12,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,13}));
	AddState(13,new State(new int[]{42,6,47,8,37,10,43,-13,45,-13,46,-13,133,-13,134,-13,135,-13,136,-13,137,-13,138,-13,139,-13,140,-13,126,-13,41,-13,44,-13}));
	AddState(14,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,15}));
	AddState(15,new State(new int[]{42,6,47,8,37,10,43,-14,45,-14,46,-14,133,-14,134,-14,135,-14,136,-14,137,-14,138,-14,139,-14,140,-14,126,-14,41,-14,44,-14}));
	AddState(16,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,17}));
	AddState(17,new State(new int[]{42,6,47,8,37,10,43,-15,45,-15,46,-15,133,-15,134,-15,135,-15,136,-15,137,-15,138,-15,139,-15,140,-15,126,-15,41,-15,44,-15}));
	AddState(18,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,19}));
	AddState(19,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,-18,134,20,135,22,136,24,137,26,138,28,139,30,140,32,126,-18,41,-18,44,-18}));
	AddState(20,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,21}));
	AddState(21,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,-19,134,-19,135,22,136,24,137,26,138,28,139,30,140,32,126,-19,41,-19,44,-19}));
	AddState(22,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,23}));
	AddState(23,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,-20,134,-20,135,-20,136,-20,137,26,138,28,139,30,140,32,126,-20,41,-20,44,-20}));
	AddState(24,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,25}));
	AddState(25,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,-21,134,-21,135,-21,136,-21,137,26,138,28,139,30,140,32,126,-21,41,-21,44,-21}));
	AddState(26,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,27}));
	AddState(27,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,-22,134,-22,135,-22,136,-22,137,-22,138,-22,139,-22,140,-22,126,-22,41,-22,44,-22}));
	AddState(28,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,29}));
	AddState(29,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,-23,134,-23,135,-23,136,-23,137,-23,138,-23,139,-23,140,-23,126,-23,41,-23,44,-23}));
	AddState(30,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,31}));
	AddState(31,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,-24,134,-24,135,-24,136,-24,137,-24,138,-24,139,-24,140,-24,126,-24,41,-24,44,-24}));
	AddState(32,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,33}));
	AddState(33,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,-25,134,-25,135,-25,136,-25,137,-25,138,-25,139,-25,140,-25,126,-25,41,-25,44,-25}));
	AddState(34,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,35}));
	AddState(35,new State(new int[]{41,36,42,6,47,8,37,10,43,12,45,14,46,16,133,18,134,20,135,22,136,24,137,26,138,28,139,30,140,32}));
	AddState(36,new State(-9));
	AddState(37,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,38}));
	AddState(38,new State(-16));
	AddState(39,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,40}));
	AddState(40,new State(-17));
	AddState(41,new State(-26));
	AddState(42,new State(-27));
	AddState(43,new State(new int[]{40,44}));
	AddState(44,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49,41,-6,44,-6},new int[]{-5,45,-4,50}));
	AddState(45,new State(new int[]{41,46,44,47}));
	AddState(46,new State(-28));
	AddState(47,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,48}));
	AddState(48,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,18,134,20,135,22,136,24,137,26,138,28,139,30,140,32,41,-8,44,-8}));
	AddState(49,new State(-29));
	AddState(50,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,18,134,20,135,22,136,24,137,26,138,28,139,30,140,32,41,-7,44,-7}));
	AddState(51,new State(new int[]{132,52,42,-27,47,-27,37,-27,43,-27,45,-27,46,-27,133,-27,134,-27,135,-27,136,-27,137,-27,138,-27,139,-27,140,-27,126,-27}));
	AddState(52,new State(new int[]{40,34,45,37,33,39,131,41,127,42,130,43,125,49},new int[]{-4,53}));
	AddState(53,new State(new int[]{42,6,47,8,37,10,43,12,45,14,46,16,133,18,134,20,135,22,136,24,137,26,138,28,139,30,140,32,126,-4}));
	AddState(54,new State(new int[]{127,55}));
	AddState(55,new State(-5));

	rules=new Rule[30];
	rules[1]=new Rule(-2, new int[]{-1,126});
	rules[2]=new Rule(-1, new int[]{-3,126});
	rules[3]=new Rule(-3, new int[]{-4});
	rules[4]=new Rule(-3, new int[]{127,132,-4});
	rules[5]=new Rule(-3, new int[]{129,127});
	rules[6]=new Rule(-5, new int[]{});
	rules[7]=new Rule(-5, new int[]{-4});
	rules[8]=new Rule(-5, new int[]{-5,44,-4});
	rules[9]=new Rule(-4, new int[]{40,-4,41});
	rules[10]=new Rule(-4, new int[]{-4,42,-4});
	rules[11]=new Rule(-4, new int[]{-4,47,-4});
	rules[12]=new Rule(-4, new int[]{-4,37,-4});
	rules[13]=new Rule(-4, new int[]{-4,43,-4});
	rules[14]=new Rule(-4, new int[]{-4,45,-4});
	rules[15]=new Rule(-4, new int[]{-4,46,-4});
	rules[16]=new Rule(-4, new int[]{45,-4});
	rules[17]=new Rule(-4, new int[]{33,-4});
	rules[18]=new Rule(-4, new int[]{-4,133,-4});
	rules[19]=new Rule(-4, new int[]{-4,134,-4});
	rules[20]=new Rule(-4, new int[]{-4,135,-4});
	rules[21]=new Rule(-4, new int[]{-4,136,-4});
	rules[22]=new Rule(-4, new int[]{-4,137,-4});
	rules[23]=new Rule(-4, new int[]{-4,138,-4});
	rules[24]=new Rule(-4, new int[]{-4,139,-4});
	rules[25]=new Rule(-4, new int[]{-4,140,-4});
	rules[26]=new Rule(-4, new int[]{131});
	rules[27]=new Rule(-4, new int[]{127});
	rules[28]=new Rule(-4, new int[]{130,40,-5,41});
	rules[29]=new Rule(-4, new int[]{125});

	nonTerminals = new string[] {"", "line", "$accept", "stmt", "expr", 
	  "exprlist", };
  }

  protected override void DoAction(int action)
  {
	switch (action)
	{
	  case 3: // stmt -> expr 
{
					this.Result = value_stack.array[value_stack.top-1];				
				}
		break;
	  case 4: // stmt -> VARIABLE ASSIGN expr 
{
					this.Evaluator.SetVariable(value_stack.array[value_stack.top-3].As<string>(), value_stack.array[value_stack.top-1].Value);
					this.Result = value_stack.array[value_stack.top-1];
				}
		break;
	  case 5: // stmt -> UNLET VARIABLE 
{
					this.Evaluator.KillVariable(value_stack.array[value_stack.top-1].As<string>());
					this.Result = default(Expression);
				}
		break;
	  case 7: // exprlist -> expr 
{
					yyval.AddExpressionToList(value_stack.array[value_stack.top-1]);
				}
		break;
	  case 8: // exprlist -> exprlist ',' expr 
{
					yyval = value_stack.array[value_stack.top-3];
					yyval.AddExpressionToList(value_stack.array[value_stack.top-1]);
				}
		break;
	  case 9: // expr -> '(' expr ')' 
{
					yyval = value_stack.array[value_stack.top-2];
				}
		break;
	  case 10: // expr -> expr '*' expr 
{
					yyval = value_stack.array[value_stack.top-3] * value_stack.array[value_stack.top-1];
				}
		break;
	  case 11: // expr -> expr '/' expr 
{
					yyval = value_stack.array[value_stack.top-3] / value_stack.array[value_stack.top-1];
				}
		break;
	  case 12: // expr -> expr '%' expr 
{
					yyval = value_stack.array[value_stack.top-3] % value_stack.array[value_stack.top-1];
				}
		break;
	  case 13: // expr -> expr '+' expr 
{
					yyval = value_stack.array[value_stack.top-3] + value_stack.array[value_stack.top-1];
				}
		break;
	  case 14: // expr -> expr '-' expr 
{
					yyval = value_stack.array[value_stack.top-3] - value_stack.array[value_stack.top-1];
				}
		break;
	  case 15: // expr -> expr '.' expr 
{
					yyval = Expression.DotOperator(value_stack.array[value_stack.top-3], value_stack.array[value_stack.top-1]);
				}
		break;
	  case 16: // expr -> '-' expr 
{
					yyval = -value_stack.array[value_stack.top-1];
				}
		break;
	  case 17: // expr -> '!' expr 
{
					yyval = !value_stack.array[value_stack.top-1];
				}
		break;
	  case 18: // expr -> expr OR expr 
{
					yyval = new Expression(value_stack.array[value_stack.top-3].As<bool>() || value_stack.array[value_stack.top-1].As<bool>());
				}
		break;
	  case 19: // expr -> expr AND expr 
{
					yyval = new Expression(value_stack.array[value_stack.top-3].As<bool>() && value_stack.array[value_stack.top-1].As<bool>());
				}
		break;
	  case 20: // expr -> expr EQUALS expr 
{
					yyval = value_stack.array[value_stack.top-3] == value_stack.array[value_stack.top-1];
				}
		break;
	  case 21: // expr -> expr NOTEQUALS expr 
{
					yyval = value_stack.array[value_stack.top-3] != value_stack.array[value_stack.top-1];
				}
		break;
	  case 22: // expr -> expr LESSTHAN expr 
{
					yyval = value_stack.array[value_stack.top-3] < value_stack.array[value_stack.top-1];
				}
		break;
	  case 23: // expr -> expr GREATERTHAN expr 
{
					yyval = value_stack.array[value_stack.top-3] > value_stack.array[value_stack.top-1];
				}
		break;
	  case 24: // expr -> expr LESSOREQUAL expr 
{
					yyval = value_stack.array[value_stack.top-3] <= value_stack.array[value_stack.top-1];
				}
		break;
	  case 25: // expr -> expr GREATEROREQUAL expr 
{
					yyval = value_stack.array[value_stack.top-3] >= value_stack.array[value_stack.top-1];
				}
		break;
	  case 27: // expr -> VARIABLE 
{
					yyval = this.Evaluator.GetVariable(value_stack.array[value_stack.top-1].As<string>());
				}
		break;
	  case 28: // expr -> FUNCTIONCALL '(' exprlist ')' 
{
					yyval = this.Evaluator.CallFunctionInternal(value_stack.array[value_stack.top-4].As<string>(), value_stack.array[value_stack.top-2]);
				}
		break;
	  case 29: // expr -> error 
{
					// TODO: talk about a well written, communicative, helpful, useful error message!
					throw new SyntaxErrorException("Syntax error");
				}
		break;
	}
  }

  protected override string TerminalToString(int terminal)
  {
	if (((Tokens)terminal).ToString() != terminal.ToString())
	  return ((Tokens)terminal).ToString();
	else
	  return CharToString((char)terminal);
  }


}
}

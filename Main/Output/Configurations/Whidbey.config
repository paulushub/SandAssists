<configuration>
  <dduetools>
    <builder>
      <components>

        <!-- Create skeleton document -->
        <component type="Microsoft.Ddue.Tools.CopyFromFileComponent" assembly="$(SandcastleComponent)">
            <!-- 1. Include the reference skeleton for the target style -->
            <SandcastleItem name="%Skeleton%" />
            <copy source="/*" target="/" />
        </component>

        <!-- Copy in reflection data -->
        <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
          <index name="reflection" value="/reflection/apis/api" key="@id" cache="10">
              <!-- 2. Include the reference data sources -->
              <SandcastleItem name="%ReferenceData%" />
          </index>
          <copy name="reflection" source="*" target="/document/reference" />
        </component>
          
        <!-- Copy in container data -->
        <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
              <copy name="reflection" key="string(/document/reference/containers/namespace/@api)" source="*[not(local-name()='elements')]" target="/document/reference/containers/namespace" />
        </component>
        <component type="Microsoft.Ddue.Tools.ForEachComponent" assembly="$(SandcastleComponent)">
          <variable expression="/document/reference/containers//type/@api" />
          <components>
              <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
                  <copy name="reflection" source="apidata|typedata|templates|attributes" target="/document/reference/containers//type[@api=$key]" />
            </component>
          </components>
        </component>

	    <!-- Copy in explicitInterfaceImplemented reflection data -->
        <component type="Microsoft.Ddue.Tools.ForEachComponent" assembly="$(SandcastleComponent)">
          <variable expression="/document/reference/implements/member/@api | /document/reference/implements//type/@api" />
          <components>
              <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
                  <copy name="reflection" source="apidata" target="/document/reference/implements//*[@api=$key and not(apidata)]" />
 	      <copy name="reflection" source="templates" target="/document/reference/implements//*[@api=$key and not(apidata) and not(specialization)]" />
	    </component>
          </components>
        </component>

	      <!-- Copy in parameter data -->
	      <component type="Microsoft.Ddue.Tools.ForEachComponent" assembly="$(SandcastleComponent)">
          <variable expression="/document/reference/parameters/parameter//type/@api" />
          <components>
              <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
                  <copy name="reflection" source="apidata" target="/document/reference/parameters/parameter//type[boolean(@api=$key) and not(apidata)]" />
	          </component>
          </components>
        </component>

        <!-- Generate syntax -->
        <component type="Microsoft.Ddue.Tools.IfThenComponent" assembly="$(SandcastleComponent)">
          <if condition="not(starts-with($key,'Overload:') or starts-with($key,'R:'))" />
          <then>
            <component type="Microsoft.Ddue.Tools.SyntaxComponent" assembly="$(SandcastleComponent)">
              <syntax input="/document/reference" output="/document/syntax" />
              <generators>
                  <!-- 3. Include the syntax generators -->
                  <SandcastleItem name="%SyntaxGenerators%" />                   
              </generators>
            </component>
          </then>
        </component>

        <!-- Copy in comments -->
          <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
              <index name="comments" value="/doc/members/member" key="@name" cache="100">
              <!-- 4. Include the comments from both the SDK and the project -->
              <SandcastleItem name="%ReferenceContents%" />                   
          </index>
          <copy name="comments" source="*" target="/document/comments" />
            <components>
                <!-- copy comments for inheritdoc -->
                <component type="Sandcastle.Components.Copiers.InheritDocCopyComponent" assembly="$(SandAssistComponent)">
                    <copy name="comments" use="reflection"/>
                </component>
            </components>
        </component>

        <!-- Copy in reflection data and comments for members -->
        <component type="Microsoft.Ddue.Tools.ForEachComponent" assembly="$(SandcastleComponent)">
          <variable expression="/document/reference/elements//element/@api" />
          <components>
            <component type="Microsoft.Ddue.Tools.IfThenComponent" assembly="$(SandcastleComponent)">
              <if condition="not(/document/reference/elements/element[@api=$key]/apidata)" />
              <then>
                  <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
                      <copy name="reflection" source="*[not(self::elements)]" target="/document/reference/elements//element[@api=$key]" />
                </component>
              </then>
            </component>
              <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
                  <copy name="comments" source="summary|overloads|inheritdoc" target="/document/reference/elements//element[@api=$key]" />
                  <components>
                      <!-- copy comments for inheritdoc -->
                      <component type="Sandcastle.Components.Copiers.InheritDocCopyComponent" assembly="$(SandAssistComponent)">
                          <copy name="comments" use="reflection"/>
                      </component>
                  </components>
             </component>
          </components>
          </component>

	      <!-- Copy in comments for the member's declaring type. -->
          <component type="Sandcastle.Components.CopyFromIndexComponent" assembly="$(SandAssistComponent)">
              <copy name="comments" key="string(/document/reference/containers/type/@api)" source="summary" target="/document/reference/containers" />
          </component>

          <!-- For creating and writing out the updated comments for Intellisense support -->
          <SandcastleInclude component="Sandcastle.Components.IntellisenseComponent" />

          <!-- For handling all enhancements before the transformations. -->
          <SandcastleInclude component="Sandcastle.Components.ReferencePreTransComponent" />

          <!-- For handling code formatting and highlighting in documentations. -->
          <SandcastleInclude component="Sandcastle.Components.ReferenceCodeComponent" />

          <!-- For handling mathematical formulas or equations in the documentations. -->
          <SandcastleInclude component="Sandcastle.Components.ReferenceMathComponent" />
          
          <!-- For the main XSL transformation -->
          <component type="Microsoft.Ddue.Tools.TransformComponent" assembly="$(SandcastleComponent)">
            <!-- 5. Include the main reference transform file -->
            <SandcastleItem name="%Transforms%" />
          </component>

          <!-- For handling all enhancements after the transformations. -->
          <SandcastleInclude component="Sandcastle.Components.ReferencePostTransComponent" />
          
          <!-- For handling the individual format outputs. -->
          <SandcastleInclude component="Sandcastle.Components.CloneComponent" />

      </components>
    </builder>
  </dduetools>
</configuration>

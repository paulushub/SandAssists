<configuration>
  <dduetools>
    <builder>
      <components>

        <!-- Create skeleton document -->
        <component type="Microsoft.Ddue.Tools.CopyFromFileComponent" assembly="$(SandcastleComponent)">
            <!-- 1. Include the conceptual skeleton for the target style -->
            <SandcastleItem name="%Skeleton%" />
            <copy source="/*" target="/" />
        </component>

          <!-- Copy in comments - The actual conceptual content -->
        <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="$(SandcastleComponent)">
          <index name="comments" value="/topic" key="@id">             
            <!-- 2. Include the conceptual topic contents directory -->
            <SandcastleItem name="%TopicsContents%" />
          </index>
          <copy name="comments" source="/topic" target="/document" />
        </component>

        <SandcastleInclude component="Microsoft.Ddue.Tools.IntellisenseComponent" />  
          
        <!-- resolve tokens -->
        <component type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="$(SandcastleComponent)">
            <context prefix="ddue" name="http://ddue.schemas.microsoft.com/authoring/2003/5" />
            <!-- 3. Include the tokens files -->
            <SandcastleItem name="%Tokens%" />
            <replace elements="/*//ddue:token[text()!='autoOutline']" item="string(.)" />
        </component>

        <!-- copy in metadata keywords -->
        <component type="Microsoft.Ddue.Tools.CopyFromFilesComponent" assembly="$(SandcastleComponent)">
            <!-- 4. Include the metadata keywords -->
            <SandcastleItem name="%MetadataKeywords%" />
        </component>

          <!-- copy in metadata attributes -->
        <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="$(SandcastleComponent)">
          <index name="metadata" value="/metadata/topic" key="@id">
            <!-- 5. Include the metadata attributes -->
            <SandcastleItem name="%MetadataAttributes%" />
          </index>
          <index name="version" value="/metadata/topic" key="@id">
            <!-- 6. Include the metadata version information -->
            <SandcastleItem name="%MetadataVersion%" />           
          </index>
          <copy name="metadata" source="*" target="/document/metadata" />
          <copy name="metadata" key="string('*')" source="*" target="/document/metadata" />
          <copy name="version" key="string('*')" source="*" target="/document/metadata" missing-target="error" />
        </component>

        <!-- Copy in metadata project settings -->
        <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="$(SandcastleComponent)">
	        <index name="projectSettings" value="/*/item" key="@id">
            <!-- 7. Include the metadata project settings -->
            <SandcastleItem name="%MetadataSettings%" />          
            </index>
            <copy name="projectSettings" key="string('PBM_FileVersion')" source="." target="/document/metadata" />
	    </component>

        <SandcastleInclude component="Microsoft.Ddue.Tools.ExampleComponent" />  
 
	    <!-- Copy in topicTypes -->
	    <component type="Microsoft.Ddue.Tools.ForEachComponent" assembly="$(SandcastleComponent)">
	        <context prefix="ddue" name="http://ddue.schemas.microsoft.com/authoring/2003/5" />
	        <context prefix="xlink" name="http://www.w3.org/1999/xlink" />
            <variable expression="/document/topic/*/ddue:relatedTopics/*/@xlink:href" />
            <components>
  		    <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="$(SandcastleComponent)">
		    <context prefix="ddue" name="http://ddue.schemas.microsoft.com/authoring/2003/5" />
		    <context prefix="xlink" name="http://www.w3.org/1999/xlink" />
	  		    <index name="topicType" value="/metadata/topic" key="@id">
                    <!-- 8. Include the metadata attributes -->
                    <SandcastleItem name="%MetadataAttributes%" />
                </index>
	  		    <copy name="topicType" source="topicType" 
                      target="/document/topic/*/ddue:relatedTopics/*[@xlink:href='{0}' and not(@topicType_id)]" 
                      attribute="true" ignoreCase="true" missing-target="error" />             	
		    </component>
            </components>
	     </component>
       
         <component type="Sandcastle.Components.ConceptualPreTransComponent" assembly="$(SandAssistComponent)">
              <!-- Replaces <token>autoOutline</token> with an <autoOutline xmlns=""/> node. -->
              <autoOutline value="true" depth="3" />
          </component>

          <component type="Sandcastle.Components.ConceptualCodeComponent" assembly="$(SandAssistComponent)">
              <options mode="IndirectIris" tabSize="4" numberLines="false" outlining="false"/>
              
              <!--The following options are for processing codeReference tags in the 
              conceptual help.
              It is a replacement of the ExampleComponent, providing better coloring,
              minimum memory usage etc.
              
              $codeSnippets
                @process: * Indicates whether or not to process the codeReference.
                          * If true, the codeReference tags are process by this component
                          * Default: false
                         
                @storage: * Indicates where the code snippets should be stored after loading
                          * Possible values are
                               - Memory: the snippets are stored in memory similar to 
                                         the ExampleComponent.
                               - Database: the snippets are stored in Sqlite database.
                          * Default: Database 
                @separator: * For multi-parts snippets, this defines the separator... 
                            * Default: ...-->
              
              <!--<codeSnippets process="true" storage="Sqlite" separator="...">
                  <codeSnippet source=".\CodeSnippetSample.xml" format="Sandcastle" />
              </codeSnippets>-->
              <SandcastleItem name="%CodeSnippets%" />
          </component>

          <component type="Sandcastle.Components.ConceptualMathComponent" assembly="$(SandAssistComponent)">
              <paths inputPath=".\math\" baseOutput=".\Output" outputPath="math" link="../math/" />
              <!-- 
              Specifiying the equation image file naming method
               @method (enumeration): default - Sequential
                    - Sequential, using Math0001, Math0002 etc, using the prefix.
                    - Guid, using dynamically generated guid values.
                    - Random, using the random file name generation provided by the framework.
               @prefix - only used for the Sequential type.     
              -->
              <naming method="Sequential" prefix="math" /> 
              
              <!--
              This specifies the equation numbering...only the displayed equations
                @show (Boolean): default - true 
                     Whether to display equation numbers or not
                @byPage (Boolean): default - true
                     Whether to display equations numbers by page.
                     - If true, each topic page starts with equation numbering 1, 2, ...
                     - If false, the sequential numbering from a page continues on the next page.
                 @format (String): default - ({0})
                    Specifies the format of the equation number.
                    
                 @formatIncludesPage (Boolean): default - false
                    Indicates whether the "format" includes the page number of the topic.
                 Note: Topic pages are not numbered, but this component numbers them as
                       they are being processed.
              -->
              <numbering show="true" byPage="false" format="Eqn. ({0}.{1})" formatIncludesPage="true" />
              <!-- 
              We keep this separate, just in case we offer a MathML render with
              different metrics.
                formatter:
                    @format: Only "LaTeX" is currently supported.
                    @type: MimeTeX or MikTeX
                    @baseSize: 10, 11 or 12 for LaTeX font sizes. This is used for
                    both inline and displayed (optional).
                style:
                    @type: inline or displayed.
                    @baseSize: 10, 11 or 12 for LaTeX font sizes.
                    @zoomLevel: 0 (\tiny) to 8 (\Huge). 2 is \normalsize, 3 is \large. 
              -->
              <formatter format="LaTeX" type="MikTeX" baseSize="10">
                  <style type="inline" baseSize="10" zoomLevel="2" />
                  <style type="displayed" baseSize="10" zoomLevel="3" />
              </formatter>
              
              <!-- NOTE: Only for MikTeX
              Specify the LaTeX packages your equations will require.
              Note: The default setting uses the following:
                \usepackage{amsmath, amsfonts, amssymb, latexsym}
                \usepackage[mathscr]{eucal}
              Any packages specified here only adds to this default.
              Examples:
              <packages>
                  <package use="amstext" />
                  <package use="amsbsy, amscd" />
                  <package use="noamsfonts" options="psamsfonts" />
              </packages>
              -->
              <packages>
                  <package use="picture" options="calc" />
                  <package use="xy" options="all,knot,poly" />
              </packages>
              
              <!-- NOTE: Currently Only MikTeX. MimeTeX supports user commands at 
                         compile time only and I am working on that...
              Define any new or user commands to be used in your equations. 
              This is added as \newcommand in the formatting of the equations.
              Note: There is no default new or user commands.
              Examples:
              1. For \newcommand{\la}{\leftarrow}...
                  <command name="\\la" value="\\leftarrow" />
                  
              2. For command with arguments \newcommand{\env}[1]{\emph{#1}}    
                    <command name="\env" value="\emph{#1}" arguments="1" />
                  
                  for \newcommand{\con}[3]{#1\equiv#2\pod{\#3}}
                    <command name="\con" value="#1\equiv#2\pod{\#3}" arguments="3" />
                  
                  and for optional arguments \newcommand{\NNSum}[2][n]{#2_{1}+#2_{3}+\cdots+#2_{#1}}
                    <command name="\NNSum" value="#2_{1}+#2_{3}+\cdots+#2_{#1}" arguments="2 n" />
              -->
              <commands>
                  <!-- For testing an example 
                  <command name="" value="" />-->
                  <command name="\quot" value="\dfrac{\varphi \cdot X_{n, #1}}{\varphi_{#2} \times \varepsilon_{#1}}" arguments="2" />
                  <command name="\exn" value="(x+\varepsilon_{#1})^{#1}" arguments="1" />
              </commands>
          </component>

          <!-- Apply the conceptual transforms --> 
          <component type="Microsoft.Ddue.Tools.TransformComponent" assembly="$(SandcastleComponent)">
              <!-- 9. Include the main conceptual transform file -->
              <SandcastleItem name="%Transforms%" />
          </component>

          <component type="Sandcastle.Components.ConceptualPostTransComponent" assembly="$(SandAssistComponent)">
              <paths outputPath=".\Output\"/>
              <attributes>
                  <attribute name="DocSet" value="NETFramework" />
                  <attribute name="DocSet" value="NETCompactFramework"/>
              </attributes>
              <scripts>
                  <IncludeItem item="assistScripts" />
              </scripts>
              <styles>
                  <!-- Include the various styles used by the Sandcastle Assist -->
                  <IncludeItem item="codeStyle" />
                  <IncludeItem item="assistStyle" />
              </styles>
              <header>
                  <!-- Include the logo image support -->
                  <IncludeItem item="logoImage" />
                  <!--<tables>
                      <table name="" operation="" />
                  </tables>-->
              </header>
          </component>

          <!-- Resolve conceptual art/media links -->
        <component type="Microsoft.Ddue.Tools.ResolveArtLinksComponent" assembly="$(SandcastleComponent)">
            <!-- 10. Include the conceptual media links files -->
            <SandcastleItem name="%MediaLinks%" />
        </component>

        <!-- Resolve shared content -->
        <component type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="$(SandcastleComponent)">
            <!-- 11. Include the conceptual shared content files -->
            <SandcastleItem name="%SharedContents%" />
        </component>

        <SandcastleInclude component="Microsoft.Ddue.Tools.CloneComponent" />
          
        <SandcastleInclude component="Microsoft.Ddue.Tools.HxfGeneratorComponent" />  
        
      </components>
    </builder>
  </dduetools>
</configuration>

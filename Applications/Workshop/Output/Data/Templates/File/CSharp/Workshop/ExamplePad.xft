<?xml version="1.0"?>
<Template author="Mike Krueger" version="1.0">
	
	<Config
		  name        = "${res:Templates.File.#Develop.SimplePad.Name}"
		  icon        = "C#.File.FullFile"
		  category    = "C#"
		  subcategory = "Extensibility"
		  defaultname = "PadContent${Number}.cs"
		  language    = "C#"/>
	 
	<Description>${res:Templates.File.#Develop.SimplePad.Description}</Description>

    <References>
        <Reference include="System.Windows.Forms" />
        <Reference include="ICSharpCode.Core" hintPath="${AppBinPath}\ICSharpCode.Core.dll" copyLocal="false" />
        <Reference include="ICSharpCode.Core.WinForms" hintPath="${AppBinPath}\ICSharpCode.Core.WinForms.dll" copyLocal="false" />
        <Reference include="ICSharpCode.SharpDevelop" hintPath="${AppBinPath}\ICSharpCode.SharpDevelop.dll" copyLocal="false" />
    </References>

    <!-- 
	Special new file templates:
		${StandardNamespace}        -> Standardnamespace of the current project or FileNameWithoutExtension
		${FullName}                 -> Full generated path name
		${FileName}                 -> File name with extension
		${FileNameWithoutExtension} -> File name without extension
		${Extension}                -> Extension in the form ".cs"
		${Path}                     -> Full path of the file
	 -->
	<Files>
		<File name="${FullName}" language="C#">
            <![CDATA[
${StandardHeader.C#}
using System;
using System.Windows.Forms;

using ICSharpCode.Core;
using ICSharpCode.SharpDevelop.Gui;

namespace ${StandardNamespace}
{
	/// <summary>
	/// Description of the pad content
	/// </summary>
	public sealed class ${FileNameWithoutExtension} : AbstractPadContent
	{
		private Panel _padControl;
		
		/// <summary>
		/// Creates a new ${FileNameWithoutExtension} object
		/// </summary>
		public ${FileNameWithoutExtension}()
		{
			_padControl = new Panel();
			// TODO: Initialize the panel's content.
		}
		
		/// <summary>
		/// The <see cref="System.Windows.Forms.Control"/> representing the pad
		/// </summary>
		public override Control Control 
        {
			get 
            {
				return _padControl;
			}
		}
		
		/// <summary>
		/// Refreshes the pad
		/// </summary>
		public override void RedrawContent()
		{
			// TODO: Refresh the whole pad control here, renew all resource strings whatever
			//       Note that you do not need to recreate the control.
		}
		
		/// <summary>
		/// Cleans up all used resources
		/// </summary>
		protected override void Dispose(bool disposing)
		{
            if (_padControl != null && !_padControl.IsDisposed)
            {
			    _padControl.Dispose();
            }
            
			base.Dispose(disposing);
		}
	}
}
            ]]>
		</File>
	</Files>
	
	<AdditionalOptions/>
	
</Template>

<AddIn name        = "Code Editor"
       author      = "Mike Krüger, Georg Brandl"
       description = "Implements the default code editing features for the text editor"
       addInManagerHidden = "preinstalled">
	
	<Manifest>
		<Identity name="ICSharpCode.CodeEditor"/>
		<Dependency addin="SharpDevelop"/>
	</Manifest>
	
	<Runtime>
        <Import assembly = "ICSharpCode.CodeEditor.dll">
            <ConditionEvaluator name="TextContent" class="ICSharpCode.TextEditor.Conditions.TextContentConditionEvaluator"/>

            <Doozer name="EditAction" class="ICSharpCode.TextEditor.Codons.EditActionDoozer"/>
        </Import>
	</Runtime>
	
	<Path name = "/AddIns/TextEditor/Searching/WildcardHelpPath">
		<MenuItem id    = "*Char"
		          label = "* Zero or more of any character" />
		<MenuItem id    = "?Char"
		          label = "? Any single character" />
		<MenuItem id    = "#Char"
		          label = "# Any single digit" />
		<MenuItem id    = "[]Char"
		          label = "[] Any one character in the set" />
		<MenuItem id    = "[!]Char"
		          label = "[!] Any one character not in the set" />
	</Path>

    <!-- Note : Most actions are put directly into the control, because
	            they're used for the standalone version too, only put keys in the
	            tree that are sharpdevelop specific, general keys put into TextAreaControl.GenerateDefaultActions -->
    <Path name = "/AddIns/TextEditor/EditActions">
        <EditAction id = "TemplateCompletion"  class = "ICSharpCode.TextEditor.Actions.TemplateCompletion"  keys = "Control|J"/>
        <EditAction id = "CodeCompletionPopup" class = "ICSharpCode.TextEditor.Actions.CodeCompletionPopup"  keys = "Control|Space"/>
        <EditAction id = "GoToDefinition"      class = "ICSharpCode.TextEditor.Actions.GoToDefinition"  keys = "Control|Enter"/>
        <EditAction id = "ExpandTemplateAction" class = "ICSharpCode.TextEditor.Actions.ExpandTemplateAction"  keys = "Tab"/>
    </Path>

    <!-- File extensions that should not be searched since they are not opened
	 in a text editor -->
    <Path name="/AddIns/TextEditor/Searching/ExcludedFileExtensions">
        <String text=".resx"/>
        <String text=".resources"/>
        <String text=".exe"/>
        <String text=".dll"/>
        <String text=".pdb"/>
        <String text=".obj"/>
        <String text=".exe"/>
        <String text=".msi"/>
    </Path>
	
	<Path name = "/SharpDevelop/Workbench/MainMenu/Edit">
        <MenuItem id = "Search" 
                  insertafter = "EditSelectAllSeparator" 
                  label = "${res:XML.MainMenu.SearchMenu}" type="Menu">
            <MenuItem id = "Find"
	              label = "${res:XML.MainMenu.SearchMenu.Find}"
	              icon = "Icons.16x16.FindIcon"
	              shortcut = "Control|F"
	              class = "ICSharpCode.TextEditor.Searching.Find"/>
	        <MenuItem id = "FindNext"
	                  label = "${res:XML.MainMenu.SearchMenu.FindNext}"
	                  icon = "Icons.16x16.FindNextIcon"
	                  shortcut = "F3"
	                  class = "ICSharpCode.TextEditor.Searching.FindNext"/>
	        <MenuItem id = "FindPrevious"
	                  label = "${res:XML.MainMenu.SearchMenu.FindPrevious}"
	                  icon = "Icons.16x16.FindPrevIcon"
	                  shortcut = "Shift|F3"
	                  class = "ICSharpCode.TextEditor.Searching.FindPrevious"/>
	        <MenuItem id = "FindNextSelected"
	                  label = "${res:XML.MainMenu.SearchMenu.FindNextSelected}"
	                  icon = "Icons.16x16.FindSelected"
	                  shortcut = "Control|F3"
	                  class = "ICSharpCode.TextEditor.Searching.FindNextSelected"/>
	        <MenuItem id = "Replace"
	                  label = "${res:XML.MainMenu.SearchMenu.Replace}"
	                  icon = "Icons.16x16.ReplaceIcon"
	                  shortcut = "Control|H"
	                  class = "ICSharpCode.TextEditor.Searching.Replace"/>

	        <MenuItem id = "FindInFiles"
	                  label = "${res:XML.MainMenu.SearchMenu.FindInFiles}"
	                  icon = "Icons.16x16.FindInFiles"
	                  shortcut = "Control|Shift|F"
	                  class = "ICSharpCode.TextEditor.Searching.FindInFiles"/>
	        <MenuItem id = "ReplaceInFiles"
	                  label = "${res:XML.MainMenu.SearchMenu.ReplaceInFiles}"
	                  icon = "Icons.16x16.ReplaceInFiles"
	                  shortcut = "Control|Shift|H"
	                  class = "ICSharpCode.TextEditor.Searching.ReplaceInFiles"/>
            <MenuItem id = "FindSeparator" type = "Separator"  />
            <MenuItem id = "SearchIncremental"
                      label = "${res:XML.MainMenu.SearchMenu.IncrementalSearch}"
                      icon = "Icons.16x16.FindIncrement"
                      shortcut = "Control|E"
                      class = "ICSharpCode.SharpDevelop.Searching.RunIncrementalSearch"/>
            <MenuItem id = "SearchReverseIncremental"
                      label = "${res:XML.MainMenu.SearchMenu.ReverseIncrementalSearch}"
                      icon = "Icons.16x16.FindDecrement"
                      shortcut = "Control|Shift|E"
                      class = "ICSharpCode.SharpDevelop.Searching.RunReverseIncrementalSearch"/>
            <MenuItem id = "SearchInFilesSeparator" type = "Separator" />
            <MenuItem id = "SearchResultsView"
                      label = "${res:MainWindow.Windows.SearchResultsLabel}"
                      icon = "PadIcons.FindResults"
                      class = "ICSharpCode.TextEditor.Searching.SearchResultsCommand"/>
        </MenuItem>
        <MenuItem id = "GotoLineNr"
                  label = "${res:XML.MainMenu.SearchMenu.GotoLineNr}"
                  icon = "Icons.16x16.GotoNumber"
                  shortcut = "Control|G"
                  class = "ICSharpCode.SharpDevelop.Searching.GotoLineNumber"/>
        <!--<MenuItem id = "Separator3" type = "Separator" />-->
        <MenuItem id = "GotoBrace"
                  label = "${res:XML.MainMenu.SearchMenu.GotoBrace}"
                  icon = "Icons.16x16.Braces"
                  shortcut = "Control|B"
                  class = "ICSharpCode.SharpDevelop.Searching.GotoMatchingBrace"/>

        <MenuItem id = "GotoSeparator" type = "Separator"  />

        <MenuItem id = "Bookmarks" label = "Bookmarks" type="Menu">
            <MenuItem id = "ToggleBookmark"
                      label = "${res:XML.MainMenu.SearchMenu.ToggleBookmark}"
                      shortcut = "Control|F2"
                      icon = "Bookmarks.ToggleMark"
		              loadclasslazy = "false"
                      class = "ICSharpCode.SharpDevelop.Bookmarks.ToggleBookmark"/>
            <MenuItem id = "PrevBookmark"
                      label = "${res:XML.MainMenu.SearchMenu.PrevBookmark}"
                      shortcut = "Alt|F2"
                      icon = "Bookmarks.GotoPrevInFile"
		              loadclasslazy = "false"
                      class = "ICSharpCode.SharpDevelop.Bookmarks.PrevBookmark"/>
            <MenuItem id = "NextBookmark"
                      label = "${res:XML.MainMenu.SearchMenu.NextBookmark}"
                      shortcut = "F2"
                      icon = "Bookmarks.GotoNextInFile"
		              loadclasslazy = "false"
                      class = "ICSharpCode.SharpDevelop.Bookmarks.NextBookmark"/>
            <MenuItem id = "ClearBookmarks"
                      label = "${res:XML.MainMenu.SearchMenu.ClrBookmark}"
                      icon = "Bookmarks.ClearAll"
		              loadclasslazy = "false"
                      class = "ICSharpCode.SharpDevelop.Bookmarks.ClearBookmarks"/>

            <MenuItem id = "BookmarksViewSeparator" type = "Separator"  />
            <MenuItem id = "BookmarksView"
                      label = "${res:MainWindow.Windows.BookmarksLabel}"
                      icon = "PadIcons.Bookmarks"
                      class = "ICSharpCode.SharpDevelop.Bookmarks.BookmarksCommand"/>
        </MenuItem>

        <!--<MenuItem insertafter = "Delete" insertbefore = "SelectAll" id = "Separator2" type = "Separator" />-->
        <MenuItem id = "Format" label = "${res:Dialog.ProjectOptions.Build.Advanced}" type="Menu">
            <Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.TextEditor.Gui.ITextEditorControlProvider" action="Disable">
                <MenuItem id = "FormatDocumentOrSelection"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu}"
                          icon = "Icons.16x16.Format"
                          shortcut = "Control|I"
                          class = "ICSharpCode.SharpDevelop.TextEditor.Commands.FormatSelection" />
                <MenuItem id = "FormatSeparator" type = "Separator" />
                <MenuItem id = "RemoveLeadingWs"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.RlWs}"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.RemoveLeadingWS"/>
                <MenuItem id = "RemoveTrailingWs"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.RtWs}"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.RemoveTrailingWS"/>
                <MenuItem id = "Seperator1" type = "Separator" />
                <MenuItem id = "UpperCase"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.UpperCase}"
                          icon = "Icons.16x16.LowerToUpperCase"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.ToUpperCase"/>
                <MenuItem id = "LowerCase"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.LowerCase}"
                          icon = "Icons.16x16.UpperToLowerCase"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.ToLowerCase"/>
                <MenuItem id = "Capitalize"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.Capitalize}"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.CapitalizeAction"/>
                <MenuItem id = "InvertCase"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.InvertCase}"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.InvertCaseAction"/>
                <MenuItem id = "Separator2" type = "Separator" />
                <MenuItem id = "SortSelection"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.SortLines}"
                          icon = "Icons.16x16.Sort"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.SortSelection"/>
                <MenuItem id = "Separator3" type = "Separator" />
                <MenuItem id = "Tabs2Spaces"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.Tab2Space}"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.ConvertTabsToSpaces"/>
                <MenuItem id = "Spaces2Tabs"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.Space2Tab}"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.ConvertSpacesToTabs"/>
                <MenuItem id = "LeadingTabs2Spaces"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.LdTab2Space}"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.ConvertLeadingTabsToSpaces"/>
                <MenuItem id = "LeadingSpaces2Tabs"
                          label = "${res:XML.MainMenu.EditMenu.FormatMenu.LdSpace2Tab}"
                          class ="ICSharpCode.SharpDevelop.TextEditor.Commands.ConvertLeadingSpacesToTabs"/>
                <MenuItem id = "Separator4" type = "Separator" />
                <MenuItem id = "ToggleComment"
                         icon = "Icons.16x16.ToggleComment"
                         label = "${res:XML.TextAreaContextMenu.ToggleCommentSelection}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Commands.ToggleCommentRegion"/>
                <MenuItem id = "Comment"
                         icon = "Icons.16x16.CommentRegion"
                         label = "${res:XML.TextAreaContextMenu.CommentSelection}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Commands.CommentRegion"/>
                <MenuItem id = "Uncomment"
                         icon = "Icons.16x16.UnCommentRegion"
                         label = "${res:XML.TextAreaContextMenu.UncommentSelection}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Commands.UncommentRegion"/>

                <MenuItem id = "IndentSeparator" type = "Separator" />
                <MenuItem id = "LineIndent"
                         icon = "Icons.16x16.Indent"
                         label = "${res:XML.TextAreaContextMenu.LineIndent}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Commands.IndentLine"/>
                <MenuItem id = "LineOutdent"
                         icon = "Icons.16x16.Outdent"
                         label = "${res:XML.TextAreaContextMenu.LineOutdent}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Commands.OutlineLine"/>
            </Condition>
        </MenuItem>
        <MenuItem id = "Folding" label = "${res:XML.MainMenu.EditMenu.FoldingMenu}" type="Menu">
            <Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.TextEditor.Gui.ITextEditorControlProvider" action="Disable">
                <MenuItem id          = "ToggleFolding"
                          label       = "${res:XML.MainMenu.EditMenu.FoldingMenu.ToggleFolding}"
                          shortcut    = "Shift|Control|M"
                          class       = "ICSharpCode.SharpDevelop.TextEditor.Commands.ToggleFolding"/>
                <MenuItem id          = "ToggleAllFoldings"
                          label       = "${res:XML.MainMenu.EditMenu.FoldingMenu.ToggleAllFoldings}"
                          shortcut    = "Shift|Control|L"
                          class       = "ICSharpCode.SharpDevelop.TextEditor.Commands.ToggleAllFoldings"/>
                <MenuItem id          = "ShowDefinitionsOnly"
                          label       = "${res:XML.MainMenu.EditMenu.FoldingMenu.ShowDefinitions}"
                          shortcut    = "Shift|Control|P"
                          class       = "ICSharpCode.SharpDevelop.TextEditor.Commands.ShowDefinitionsOnly"/>
            </Condition>
        </MenuItem>
    </Path>
	
    <!--Begin: Extensions of the Standard Toolbar -->
	<Path name = "/SharpDevelop/Workbench/ToolBar/Standard">
		<ToolbarItem id = "FindSeparator" insertbefore = "HelpTopicsSeparator" type = "Separator" />
        <ToolbarItem id      = "Find"
     	             type    ="SplitButton"
	                 insertbefore = "HelpTopicsSeparator"
		             icon    = "Icons.16x16.FindIcon"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.CommitSearch.ToolTip}"
		             class   = "ICSharpCode.TextEditor.Searching.Find">
            <MenuItem id = "FindNext"
                      label = "${res:XML.MainMenu.SearchMenu.FindNext}"
                      icon = "Icons.16x16.FindNextIcon"
                      shortcut = "F3"
                      class = "ICSharpCode.TextEditor.Searching.FindNext"/>
            <MenuItem id = "FindPrevious"
                      label = "${res:XML.MainMenu.SearchMenu.FindPrevious}"
                      icon = "Icons.16x16.FindPrevIcon"
                      shortcut = "Shift|F3"
                      class = "ICSharpCode.TextEditor.Searching.FindPrevious"/>
            <MenuItem id = "FindNextSelected"
                      label = "${res:XML.MainMenu.SearchMenu.FindNextSelected}"
                      icon = "Icons.16x16.FindSelected"
                      shortcut = "Control|F3"
                      class = "ICSharpCode.TextEditor.Searching.FindNextSelected"/>
            <MenuItem id = "Replace"
                      label = "${res:XML.MainMenu.SearchMenu.Replace}"
                      icon = "Icons.16x16.ReplaceIcon"
                      shortcut = "Control|H"
                      class = "ICSharpCode.TextEditor.Searching.Replace"/>

            <MenuItem id = "FindInFiles"
                      label = "${res:XML.MainMenu.SearchMenu.FindInFiles}"
                      icon = "Icons.16x16.FindInFiles"
                      shortcut = "Control|Shift|F"
                      class = "ICSharpCode.TextEditor.Searching.FindInFiles"/>
            <MenuItem id = "ReplaceInFiles"
                      label = "${res:XML.MainMenu.SearchMenu.ReplaceInFiles}"
                      icon = "Icons.16x16.ReplaceInFiles"
                      shortcut = "Control|Shift|H"
                      class = "ICSharpCode.TextEditor.Searching.ReplaceInFiles"/>
        </ToolbarItem>
		
		<ToolbarItem id      = "FindComboBox"
	                 insertbefore = "HelpTopicsSeparator"
		             type    = "ComboBox"
		             tooltip = "${res:MainWindow.Windows.ClassBrowser.CommitSearch.ToolTip}"
		             class   = "ICSharpCode.TextEditor.Searching.FindComboBox"/>
	</Path>
    <!--End: Extensions of the Standard Toolbar -->

    <!-- Begin: TextEditor Toolbar -->
    <Path name = "/SharpDevelop/Workbench/ToolBar/TextEditor">
        <Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.TextEditor.Gui.ITextEditorControlProvider" action="Exclude">
            <ToolbarItem id="TextEditorToolbar" label="Text Editor" type="Description"/>
        </Condition>
        <!--<ToolbarItem id = "SearchSeparator" type = "Separator"/>-->
        <Condition name = "WindowActive" activewindow="ICSharpCode.SharpDevelop.TextEditor.Gui.ITextEditorControlProvider" action="Disable">
            <ToolbarItem id = "LineIndent"
                         icon = "Icons.16x16.Indent"
                         tooltip = "${res:XML.TextAreaContextMenu.LineIndent}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Commands.IndentLine"/>
            <ToolbarItem id = "LineOutdent"
                         icon = "Icons.16x16.Outdent"
                         tooltip = "${res:XML.TextAreaContextMenu.LineOutdent}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Commands.OutlineLine"/>
            <ToolbarItem id = "IndentSeparator" type = "Separator"/>

            <ToolbarItem id = "ToggleComment"
			             icon = "Icons.16x16.ToggleComment"
			             tooltip = "${res:XML.TextAreaContextMenu.ToggleCommentSelection}"
			             class = "ICSharpCode.SharpDevelop.TextEditor.Commands.ToggleCommentRegion"/>

            <ToolbarItem id = "Comment"
			             icon = "Icons.16x16.CommentRegion"
			             tooltip = "${res:XML.TextAreaContextMenu.CommentSelection}"
			             class = "ICSharpCode.SharpDevelop.TextEditor.Commands.CommentRegion"/>

            <ToolbarItem id = "Uncomment"
                         icon = "Icons.16x16.UnCommentRegion"
                         tooltip = "${res:XML.TextAreaContextMenu.UncommentSelection}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Commands.UnCommentRegion"/>

            <ToolbarItem id = "SearchSeparator2" type = "Separator"/>
            <ToolbarItem id = "ToggleBookmark"
			             icon = "Bookmarks.ToggleMark"
			             tooltip = "${res:XML.MainMenu.SearchMenu.ToggleBookmark.Description}"
		                 loadclasslazy = "false"
			             class = "ICSharpCode.SharpDevelop.Bookmarks.ToggleBookmark"/>
            <ToolbarItem id = "PrevBookmark"
			             icon = "Bookmarks.GotoPrevInFile"
			             tooltip = "${res:XML.MainMenu.SearchMenu.PrevBookmark.Description}"
		                 loadclasslazy = "false"
 			             class = "ICSharpCode.SharpDevelop.Bookmarks.PrevBookmark"/>
            <ToolbarItem id = "NextBookmark"
			             icon = "Bookmarks.GotoNextInFile"
			             tooltip = "${res:XML.MainMenu.SearchMenu.NextBookmark.Description}"
		                 loadclasslazy = "false"
			             class = "ICSharpCode.SharpDevelop.Bookmarks.NextBookmark"/>
            <ToolbarItem id = "ClearBookmarks"
			             icon = "Bookmarks.ClearAll"
			             tooltip = "${res:XML.MainMenu.SearchMenu.ClrBookmark.Description}"
		                 loadclasslazy = "false"
			             class = "ICSharpCode.SharpDevelop.Bookmarks.ClearBookmarks"/>
        </Condition>
    </Path>
    <!-- End: TextEditor Toolbar -->

    <Path name = "/SharpDevelop/Dialogs/OptionsDialog">
        <DialogPanel id    = "TextEditorOptions"
		             insertafter = "CodingOptions"
		             insertbefore = "ToolsOptions"
		             label = "${res:Dialog.Options.IDEOptions.TextEditorOptionsText}">
            <DialogPanel id = "General" insertbefore = "EditHighlighting"
			             label = "${res:Dialog.Options.IDEOptions.General}"
			             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.GeneralTextEditorPanel"/>
            <DialogPanel id = "Behavior" insertbefore = "EditHighlighting"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.Behaviour.PanelName}"
			             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.BehaviorTextEditorPanel"/>
            <DialogPanel id = "FontsColors" insertbefore = "EditHighlighting"
                         label = "${res:Dialog.Options.IDEOptions.TextEditor.FontsColors.PanelName}"
                         class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.FontsColorsPanel"/>
            <DialogPanel id = "Markers" insertbefore = "EditHighlighting"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.Markers.PanelName}"
			             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.MarkersTextEditorPanel"/>
            <DialogPanel id = "CodeCompletion" insertbefore = "EditHighlighting"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.CodeCompletion.PanelName}"
			             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.CodeCompletionPanel"/>
            <DialogPanel id = "EditHighlighting"
		                 label = "${res:Dialog.Options.TextEditorOptions.EditHighlighting.Title}"
		                 class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.HighlightingPanel"/>
        </DialogPanel>
    </Path>

    <!--<Path name = "/SharpDevelop/Dialogs/OptionsDialog/TextEditorOptions">
        <DialogPanel id = "EditHighlighting"
		             label = "${res:Dialog.Options.TextEditorOptions.EditHighlighting.Title}"
			     	 insertafter = "Behavior"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.HighlightingPanel"/>
    </Path>-->

    <Path name = "/SharpDevelop/ViewContent/TextEditor/OptionsDialog">
        <DialogPanel id = "General"
		             label = "${res:Dialog.Options.IDEOptions.General}"
		             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.GeneralTextEditorPanel"/>
        <DialogPanel id = "Behavior"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.Behaviour.PanelName}"
		             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.BehaviorTextEditorPanel"/>
        <DialogPanel id = "FontsColors"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.FontsColors.PanelName}"
		             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.FontsColorsPanel"/>
        <DialogPanel id = "Markers"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.Markers.PanelName}"
		             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.MarkersTextEditorPanel"/>
        <DialogPanel id = "CodeCompletion"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.CodeCompletion.PanelName}"
		             class = "ICSharpCode.SharpDevelop.TextEditor.Gui.OptionPanels.CodeCompletionPanel"/>
    </Path>

</AddIn>
